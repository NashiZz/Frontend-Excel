"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./app/Service/dynamicService.js":
/*!***************************************!*\
  !*** ./app/Service/dynamicService.js ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   uploadExcelFile: () => (/* binding */ uploadExcelFile),\n/* harmony export */   uploadExcelFileWithHeader: () => (/* binding */ uploadExcelFileWithHeader),\n/* harmony export */   uploadExcelFileWithTemplate: () => (/* binding */ uploadExcelFileWithTemplate)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! axios */ \"(app-pages-browser)/./node_modules/axios/lib/axios.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! js-sha256 */ \"(app-pages-browser)/./node_modules/js-sha256/src/sha256.js\");\n/* harmony import */ var js_sha256__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(js_sha256__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst API_BASE_URL = \"http://localhost:8080/api\";\nconst uploadExcelFile = async (file, setErrors, setSuccessMessage)=>{\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(\"\".concat(API_BASE_URL, \"/excel/dynamic\"), formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        setSuccessMessage('✅ ตรวจสอบข้อมูลเรียบร้อย ไม่มีข้อผิดพลาด');\n        setErrors([]);\n    } catch (error) {\n        if (error.response) {\n            const errorData = error.response.data;\n            if (errorData.errors) {\n                setErrors(errorData.errors);\n            } else {\n                setErrors([\n                    errorData.message || \"เกิดข้อผิดพลาด\"\n                ]);\n            }\n        } else {\n            console.error(\"Error:\", error.message);\n            setErrors([\n                \"❌ เกิดข้อผิดพลาดในการอัปโหลดไฟล์\"\n            ]);\n        }\n    }\n};\nconst uploadExcelFileWithHeader = async (file, header, setErrors, setSuccessMessage)=>{\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"headers\", header);\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(\"\".concat(API_BASE_URL, \"/excel/headers\"), formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        setSuccessMessage(\"✅ ตรวจสอบข้อมูลเรียบร้อย ไม่มีข้อผิดพลาด\");\n        setErrors([]);\n    } catch (error) {\n        if (error.response) {\n            const errorData = error.response.data;\n            if (errorData.errors) {\n                setErrors(errorData.errors);\n            } else {\n                setErrors([\n                    errorData.message || \"เกิดข้อผิดพลาด\"\n                ]);\n            }\n        } else {\n            console.error(\"Error:\", error.message);\n            setErrors([\n                \"❌ เกิดข้อผิดพลาดในการอัปโหลดไฟล์\"\n            ]);\n        }\n    }\n};\nconst uploadExcelFileWithTemplate = async (file, condition, calculater, relation, compare, setErrors, setSuccessMessage)=>{\n    if (!file) {\n        setErrors([\n            \"❌ กรุณาเลือกไฟล์ก่อนอัปโหลด\"\n        ]);\n        return;\n    }\n    console.log(\"📌 Calculating hash...\");\n    const fileHash = await calculateFileHash(file);\n    console.log(\"📌 File hash:\", fileHash);\n    const previousHash = localStorage.getItem(\"lastUploadedFileHash\");\n    if (fileHash === previousHash) {\n        setErrors([\n            \"⚠️ ไฟล์ไม่มีการเปลี่ยนแปลง ไม่จำเป็นต้องอัปโหลดซ้ำ\"\n        ]);\n        return;\n    }\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    formData.append(\"condition\", JSON.stringify(condition));\n    formData.append(\"calculater\", JSON.stringify(calculater));\n    formData.append(\"relation\", JSON.stringify(relation));\n    formData.append(\"compare\", JSON.stringify(compare));\n    try {\n        const response = await axios__WEBPACK_IMPORTED_MODULE_1__[\"default\"].post(\"\".concat(API_BASE_URL, \"/excel/template\"), formData, {\n            headers: {\n                \"Content-Type\": \"multipart/form-data\"\n            }\n        });\n        if (response.status === 200) {\n            setSuccessMessage(\"✅ อัปโหลดไฟล์สำเร็จ! ตรวจสอบข้อมูลเรียบร้อย ไม่มีข้อผิดพลาด\");\n            setErrors([]);\n            localStorage.setItem(\"lastUploadedFileHash\", fileHash);\n        }\n    } catch (error) {\n        if (error.response) {\n            const errorData = error.response.data;\n            if (errorData.errors) {\n                setErrors(errorData.errors);\n                console.log(errorData.errors);\n            } else {\n                setErrors([\n                    errorData.message || \"เกิดข้อผิดพลาด\"\n                ]);\n                console.log(errorData.message);\n            }\n        } else {\n            console.error(\"Error:\", error.message);\n            setErrors([\n                \"❌ เกิดข้อผิดพลาดในการอัปโหลดไฟล์\"\n            ]);\n        }\n    }\n};\nconst calculateFileHash = async (file)=>{\n    const reader = new FileReader();\n    return new Promise((resolve, reject)=>{\n        reader.onload = (event)=>{\n            const hash = (0,js_sha256__WEBPACK_IMPORTED_MODULE_0__.sha256)(event.target.result);\n            resolve(hash);\n        };\n        reader.onerror = (error)=>reject(error);\n        reader.readAsArrayBuffer(file);\n    });\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/Service/dynamicService.js\n"));

/***/ })

});